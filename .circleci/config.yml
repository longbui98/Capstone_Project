version: 2.1
jobs:
  linting-code:
    build:
      docker:
        - image: python:3.7.3-stretch
      working_directory: ~/repo
  
      steps:
        - checkout # Download and cache dependencies
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "requirements.txt" }} # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
        - run:
            name: install dependencies
            command: |
              python3 -m venv ~/.devops
              . ~/.devops/bin/activate
              make install
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
        - save_cache:
            paths:
              - ~/.devops
            key: v1-dependencies-{{ checksum "requirements.txt" }}
        - run: # run lint!
            name: run lint
            command: |
              . ~/.devops/bin/activate
              make lint
  
  build-deploy-docker:
    build:
      docker:
        - image: docker:latest
      working_directory: ~/repo
      
      steps:
        - checkout
        - run:
            name: Install AWS cli
            command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              groff \
              less \
              && pip3 install --upgrade pip \
              && pip3 install awscli --upgrade --user
              aws --version
        - run:
            name: Docker build
            command: |
              docker build --tag=api .
              docker image ls
        - run: 
            name: Create ECS
            command: |
              aws ecs create-cluster --cluster-name capstone-cluster
        - run:
            name: Push image to ECR
            command: |
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
              
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 717010040964.dkr.ecr.us-east-1.amazonaws.com
              
              aws ecr create-repository \
              --repository-name $PROJECT_NAME \
              --region $AWS_DEFAULT_REGION	
              
              docker build -t $PROJECT_NAME .
              docker tag $PROJECT_NAME:latest 717010040964.dkr.ecr.us-east-1.amazonaws.com/$PROJECT_NAME:latest
              docker push 717010040964.dkr.ecr.us-east-1.amazonaws.com/$PROJECT_NAME:latest
    workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]